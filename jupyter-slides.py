# -*- coding: utf-8 -*-
"""AI Workshop

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12pC52BZjCmqswYDzXpVYnDsQr32ELkY3
"""

from datetime import date
title = "Unknown Title"
today = date.today().strftime("%d %B %Y")

import pathlib
HOME_DIR = pathlib.Path.home().resolve()
ORIG_ROOT = pathlib.Path( '.' ).resolve() 
ROOT_DIR =  ORIG_ROOT / title

ROOT_DIR.mkdir(parents = True, exist_ok = True )

IMAGES_DIR = ROOT_DIR / "reveal.js" / "assets" / "images" 
VIDEOS_DIR = ROOT_DIR / "reveal.js" / "assets" / "videos" 
SOUND_DIR = ROOT_DIR / "reveal.js" / "assets" / "sounds" 
DATA_DIR = ROOT_DIR / "reveal.js" / "assets" / "data"

import platform

node = platform.node()

if node == 'NTNU-ERC':
    GIT_CMD = 'D:\PortableApps\GitPortable\bin\git.exe'
else:
    GIT_CMD = 'git'

!pip install weasyprint
!pip install pygments
!pip install youtube_dl

import subprocess
import pathlib
import os

class cd:
    """Context manager for changing the current working directory"""
    def __init__(self, newPath):
        self.newPath = pathlib.Path(newPath).expanduser().resolve()

    def __enter__(self):
        self.savedPath = pathlib.Path.cwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)

with cd( ROOT_DIR ):
    p = pathlib.Path("./reveal.js")
    if not p.is_dir():
        print("cloning reveal.js from github")
        os.system( GIT_CMD + " clone https://github.com/hakimel/reveal.js.git" )
    else:
        print("git directory exists")

    with cd("./reveal.js"):
        print("Executing git pull")
        o = None
        try:
            o = subprocess.check_output(GIT_CMD + " pull", shell=True)
        except subprocess.CalledProcessError:
            pass
        if ( o ):
            print( 'git pull:' + o.decode('utf-8') )
        print("Executing npm install")
        try:
            o = subprocess.check_output("npm install", shell = True)
        except subprocess.CalledProcessError:
            pass
        if ( o ):    
            print( 'npm install:' + o.decode('utf-8') )
    
    with cd("./reveal.js"):
        pathlib.Path("assets/images").mkdir( parents = True, exist_ok=True )
        pathlib.Path("assets/videos").mkdir( parents = True, exist_ok=True )

with cd( ROOT_DIR ):
    p = pathlib.Path("./Lecture-VN")
    if not p.is_dir():
        print("cloning Lecture-VN from github")
        os.system( GIT_CMD + " clone https://github.com/guichristmann/Lecture-VN.git" )
    else:
        print("git directory exists")

    with cd("./Lecture-VN"):
        print("Executing git pull")
        o = None
        try:
            o = subprocess.check_output(GIT_CMD + " pull", shell=True)
        except subprocess.CalledProcessError:
            pass
        if ( o ):
            print( 'git pull:' + o.decode('utf-8') )

import http.server
import socketserver
import portpicker
import threading

HTTP_PORT = portpicker.pick_unused_port()
print('HTTP_PORT', HTTP_PORT )

Handler = http.server.SimpleHTTPRequestHandler

def run():
    with socketserver.TCPServer(("", HTTP_PORT), Handler) as httpd:
        print("serving at port", HTTP_PORT)
        httpd.serve_forever()
    
thread = threading.Thread(target=run)
#thread.start()

import pathlib

with cd(ROOT_DIR):
    print("Creating renpy directory in " + str( ROOT_DIR ) )
    for d in ["renpy", "renpy/game", "renpy/images/Slides", "renpy/assets/images/slides", "renpy/assets/sounds", "renpy/assets/videos", "renpy/gui", "renpy/tl" ]:
        pathlib.Path(d).mkdir( parents = True, exist_ok = True )

ntnuRevealTheme="""
/**
 * NTNU ERC theme for reveal.js
 * Author: jacky.baltes <jacky.baltes@gmail.com>
 *
 * Designed to be used with highlight.js theme
 * "monokai_sublime.css" available from
 * https://github.com/isagalaev/highlight.js/
 *
 * For other themes, change $codeBackground accordingly.
 *
 */
 
@import url(https://fonts.googleapis.com/css?family=Ubuntu:300,700,300italic,700italic);
/*********************************************
 * GLOBAL STYLES
 *********************************************/
body {
  background: #522;
  background-color: #522; }

.reveal {
  font-family: Ubuntu, "sans-serif";
  font-size: 40px;
  font-weight: normal;
  color: #eee; }

::selection {
  color: #fff;
  background: #a23;
  text-shadow: none; }

::-moz-selection {
  color: #fff;
  background: #a23;
  text-shadow: none; }

.reveal .slides section,
.reveal .slides section > section {
  line-height: 1.3;
  font-weight: inherit; }

/*********************************************
 * HEADERS
 *********************************************/
.reveal h1,
.reveal h2,
.reveal h3,
.reveal h4,
.reveal h5,
.reveal h6 {
  margin: 0 0 20px 0;
  color: #eee;
  font-family: Ubuntu, "sans-serif";
  font-weight: normal;
  line-height: 1.0;
  letter-spacing: normal;
  text-transform: uppercase;
  text-shadow: 2px 2px 2px #222;
  word-wrap: break-word;
  text-align: center; }

.reveal h1 {
  font-size: 1.80em; }

.reveal h2 {
  font-size: 1.50em; }

.reveal h3 {
  font-size: 1.25em; }

.reveal h4 {
  font-size: 1em; }

.reveal h1 {
  text-shadow: 0 1px 0 #ccc, 0 2px 0 #c9c9c9, 0 3px 0 #bbb, 0 4px 0 #b9b9b9, 0 5px 0 #aaa, 0 6px 1px rgba(0, 0, 0, 0.1), 0 0 5px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.3), 0 3px 5px rgba(0, 0, 0, 0.2), 0 5px 10px rgba(0, 0, 0, 0.25), 0 20px 20px rgba(0, 0, 0, 0.15); }

/*********************************************
 * OTHER
 *********************************************/
.reveal p {
  margin: 20px 0;
  line-height: 1.3; }

/* Ensure certain elements are never larger than the slide itself */
.reveal img,
.reveal video,
.reveal iframe {
  max-width: 95%;
  max-height: 95%; }

.reveal strong,
.reveal b {
  font-weight: bold; }

.reveal em {
  font-style: italic; }

.reveal ol,
.reveal dl,
.reveal ul {
  display: inline-block;
  text-align: left;
  margin: 0 0 0 1em; }

.reveal ol {
  list-style-type: decimal; }

.reveal ul {
  list-style-type: disc; }

.reveal ul ul {
  list-style-type: square; }

.reveal ul ul ul {
  list-style-type: circle; }

.reveal ul ul,
.reveal ul ol,
.reveal ol ol,
.reveal ol ul {
  display: block;
  margin-left: 40px; }

.reveal dt {
  font-weight: bold; }

.reveal dd {
  margin-left: 40px; }

.reveal blockquote {
  display: block;
  position: relative;
  width: 70%;
  margin: 20px auto;
  padding: 5px;
  font-style: italic;
  background: rgba(255, 255, 255, 0.05);
  box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.2); }

.reveal blockquote p:first-child,
.reveal blockquote p:last-child {
  display: inline-block; }

.reveal q {
  font-style: italic; }

.reveal pre {
  display: block;
  position: relative;
  width: 90%;
  margin: 20px auto;
  text-align: left;
  font-size: 0.55em;
  font-family: monospace;
  line-height: 1.2em;
  word-wrap: break-word;
  box-shadow: 0px 0px 6px rgba(0, 0, 0, 0.3); }

.reveal code {
  font-family: monospace;
  text-transform: none; }

.reveal pre code {
  display: block;
  padding: 5px;
  overflow: auto;
  max-height: 400px;
  word-wrap: normal; }

.reveal table {
  margin: auto;
  border-collapse: collapse;
  border-spacing: 0; }

.reveal table th {
  font-weight: bold; }

.reveal table th,
.reveal table td {
  text-align: left;
  padding: 0.2em 0.5em 0.2em 0.5em;
  border-bottom: 1px solid; }

.reveal table th[align="center"],
.reveal table td[align="center"] {
  text-align: center; }

.reveal table th[align="right"],
.reveal table td[align="right"] {
  text-align: right; }

.reveal table tbody tr:last-child th,
.reveal table tbody tr:last-child td {
  border-bottom: none; }

.reveal sup {
  vertical-align: super;
  font-size: smaller; }

.reveal sub {
  vertical-align: sub;
  font-size: smaller; }

.reveal small {
  display: inline-block;
  font-size: 0.6em;
  line-height: 1.2em;
  vertical-align: top; }

.reveal small * {
  vertical-align: top; }

/*********************************************
 * LINKS
 *********************************************/
.reveal a {
  color: #a66;
  text-decoration: none;
  -webkit-transition: color .15s ease;
  -moz-transition: color .15s ease;
  transition: color .15s ease; }

.reveal a:hover {
  color: #dd5566;
  text-shadow: none;
  border: none; }

.reveal .roll span:after {
  color: #fff;
  background: #6a1520; }

/*********************************************
 * IMAGES
 *********************************************/
.reveal section img {
  margin: 15px 0px;
  background: rgba(255, 255, 255, 0.12);
  border: 4px solid #eee;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.15); }

.reveal section img.plain {
  border: 0;
  background: none;
  box-shadow: none; }

.reveal a img {
  -webkit-transition: all .15s linear;
  -moz-transition: all .15s linear;
  transition: all .15s linear; }

.reveal a:hover img {
  background: rgba(255, 255, 255, 0.2);
  border-color: #a23;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.55); }

/*********************************************
 * NAVIGATION CONTROLS
 *********************************************/
.reveal .controls {
  color: #a23; }

/*********************************************
 * PROGRESS BAR
 *********************************************/
.reveal .progress {
  background: rgba(0, 0, 0, 0.2);
  color: #a23; }

.reveal .progress span {
  -webkit-transition: width 800ms cubic-bezier(0.26, 0.86, 0.44, 0.985);
  -moz-transition: width 800ms cubic-bezier(0.26, 0.86, 0.44, 0.985);
  transition: width 800ms cubic-bezier(0.26, 0.86, 0.44, 0.985); }

/*********************************************
 * PRINT BACKGROUND
 *********************************************/
@media print {
  .backgrounds {
    background-color: #222; } }

.reveal p {
  font-weight: 300;
  text-shadow: 1px 1px #222; }

.reveal h1,
.reveal h2,
.reveal h3,
.reveal h4,
.reveal h5,
.reveal h6 {
  font-weight: 700; }

.reveal p code {
  background-color: #23241f;
  display: inline-block;
  border-radius: 7px; }

.reveal small code {
  vertical-align: baseline; }
  
/************************************************
 Added by Jacky Baltes
 ************************************************/
.jb-slide {
  text-align: center;
}

.jb-center {
  text-align:center;
}

.jb-very-small {
  display: inline-block;
  font-size: 0.5em;
  line-height: 1.0em;
  vertical-align: top; }
  
.jb-footer-right {
  position: absolute;
  bottom: 0px;
  right: 0px;
  width: auto;
  height: 1cm;
  max-height: 1cm;
}

.jb-footer-right-img {
  border: none;
  background: none;
  box-shadow: none;
  width: auto;
  height: 1.25cm;
}

.jb-footer-left {
  position: absolute;
  bottom: 0px;
  left: 0px;
  width: auto;
  height: 1cm;
  max-height: 1cm;
}

.jb-footer-left-img {
  border: none;
  background: none;
  box-shadow: none;
  width: auto;
  height: 1.25cm;
}
"""

with cd(ROOT_DIR):
    with open("reveal.js/css/theme/ntnuerc.css","w") as f:
        f.write(ntnuRevealTheme)

from IPython.core import magic_arguments
from IPython.core.magic import line_magic, cell_magic, line_cell_magic, Magics, magics_class
from IPython.core.display import HTML, Image, Pretty, Javascript, display
from IPython.utils.capture import capture_output

from pygments import highlight
from pygments.lexers import PythonLexer
from pygments.formatters import HtmlFormatter

from jinja2 import Template

import weasyprint as wp
import io
import base64

from docutils import core, io

import zipfile
import os

# Based on reveal.js 3.7.0
REVEAL_PRESENTATION_TEMPLATE = """
<!doctype html>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

		<title>{{title}}</title>

		<link rel="stylesheet" href="css/reveal.css">
		<link rel="stylesheet" href="css/theme/{{THEME}}.css">

		<!-- Theme used for syntax highlighting of code -->
		<link rel="stylesheet" href="lib/css/zenburn.css">

		<!-- Printing and PDF exports -->
		<script>
			var link = document.createElement( 'link' );
			link.rel = 'stylesheet';
			link.type = 'text/css';
			link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
			document.getElementsByTagName( 'head' )[0].appendChild( link );
		</script>
	</head>
	<body>
		<div class="reveal">
        <div class="slides">
            {{slides}}
        </div>
		</div>

		<script src="lib/js/head.min.js"></script>
		<script src="js/reveal.js"></script>

		<script>
			// More info about config & dependencies:
			// - https://github.com/hakimel/reveal.js#configuration
			// - https://github.com/hakimel/reveal.js#dependencies
			Reveal.initialize({
				dependencies: [
					{ src: 'plugin/markdown/marked.js' },
					{ src: 'plugin/markdown/markdown.js' },
					{ src: 'plugin/notes/notes.js', async: true },
					{ src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }
				]
			});
		</script>
	</body>
</html>
"""

REVEAL_SLIDE_TEMPLATE = """
<section id="{{id}}">

{{slideHTML}}

<aside class="notes">
{{slideNote}}
</aside>

{{slideChildren}}

</section>
"""

from urllib import request
from google.colab import files
import pathlib
from __future__ import unicode_literals
import youtube_dl

class JBData:
    """
    Class that encapsulates an image and its various representations.
    """
    
    @staticmethod
    def sReadDataFromURL( url ):
        data = request.urlopen(url).read()
        return data

    @staticmethod
    def sReadData( name ):
        with open( name, "rb" ) as f:
            data = f.read()
        return data
    
    @staticmethod
    def sWriteData( fname, data ):
        with open( fname, "wb" ) as f:
            f.write( data )
    
    def getDefaultFileName( self ):
        return DATA_DIR + "/{name}{ext}".format(name=name, ext=self.ext)
      
    def __init__( self, name, url=None, data=None, localFile=None, ext=".dat"):
        self.url = url
        self.name = name
        self.ext = ext
        if data:
            if not localFile:
                localFile = self.getDefaultFileName()
            with open( localFile, "wb" ) as f:
                f.write(data)
                self.localFile = localFile
        elif url:
            if not localFile:
                localFile = self.getDefaultFileName()
            self.data = self.readDataFromURL( url, localFile )
            if ( self.data ):
                JBData.sWriteData( localFile, self.data )
            self.localFile = localFile      
        elif localFile:
            data = JBData.sReadData(localFile)
            self.localFile, self.ext = pathlib.Path( localFile )
        else:
            uploaded = files.upload()
            for fn in uploaded.keys():
                print('User uploaded file "{name}" with length {length} bytes'.format(
                        name=fn, length=len( uploaded[fn] ) ) )
                self.localFile = fn
        self.clearCache()
    
    def readDataFromURL( self, url, tmpFile ):
        print('JBData.readDataFromURL', url )
        return JBData.sReadDataFromURL( url )
      
    def writeData( self, rdir ):
        if ( self.localFile ):
            fname = self.localFile
        else:
            fname = self.name + self.ext
            
        ret =  JBData.sWriteData( pathlib.Path( rdir ).joinpath( fname ), self.data )
        self.data = None
        return ret

    @staticmethod
    def getBase64Data( fname ):
        data = JBData.sReadData( fname )
        enc = base64.b64encode(data).decode('utf-8')  
        return enc
            
    def clearCache(self):
        if ( self.data ) and ( len(self.data) > 1024*1024 ):
            self.data = None
            
class JBImage( JBData ):
    def __init__( self, name, width, height, url=None, data=None, localFile = None ):
        super(JBImage, self).__init__( name, url, data, localFile, ext=".png")
        self.width = width
        self.height = height
    def __repr_html_file__(self, style= ""):
        return '<img src="http://localhost:{port}/{src}" style="{style}" alt="{name}"/>'.format(src=self.localFile, port=HTTP_PORT, name=self.name, style=style)

    def __repr_html_url__(self, style= ""):
        return '<img src="{src}" style="{style}" alt="{name}"/>'.format(src=self.url, name=self.name, style=style)
    
    def __repr_html_b64__(self, style="" ):
        return '<img src="data:image/png;base64,{src}" style="{style}" alt="{name}"/>'.format(src=JBData.getBase64Data(self.localFile), name=self.name, style=style)
        
    def getDefaultFileName( self ):
        return IMAGES_DIR + "/{name}{ext}".format(name=name, ext=self.ext)

class JBVideo( JBData ):
    def __init__( self, name, width, height, url=None, data=None, localFile = None ):
        super(JBVideo, self).__init__( name, url, data, localFile, ext=".mp4")
        self.width = width
        self.height = height

    def readDataFromURL( self, url, localFile = None ):
        print('Reading video from', url )
        ydl_opts = { 'outtmpl': str(localFile) }
        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            ydl.download( [ url ] )
    
    def getDefaultFileName( self ):
        return VIDEOS_DIR + "/{name}{ext}".format(name=name, ext=self.ext)

vid1 = JBVideo( 'video1', 0, 0, url='https://www.youtube.com/watch?v=BA6hAaBEciY', localFile= ROOT_DIR / "reveal.js" / "assets" / "videos" / "video1" )

!ls -l

robbi = JBImage( name='robbi', width=162, height=138, url="https://i.postimg.cc/K81kVbvQ/ntnuerc-logo-1.png", localFile= ROOT_DIR / "reveal.js" / "assets" / "images" / "robbi.png" )
logo = JBImage( name = 'logo', width=0, height=0, url='https://i.postimg.cc/4xvjvdmq/ntnu-ee-logo.png', localFile=ROOT_DIR / "reveal.js" / "assets" / "images" / "logo.png" )

RenpyInitTemplate = """
define jb = Character("Prof. Jacky Baltes", color="#06799f", callback=speaker("jb"))
define gc = Character("Student G.C.", color="#069f67", callback=speaker("gc"))

label start:
    show jb neutral at center with dissolve
    pause 1.0
    # Prof. Jacky's Introduction
    jb "Hello! I am Prof. Jacky Baltes."
    jb "This project describes {{title}}."
    jb "You can take a look at the imported slides."

    jump {{startId}}
"""

RenpyScriptTemplate = """
# Slide {{id}}
label {{label}}:
    scene bg {{id}} with {{transition}}
{{renpy}}
    jump {{right}}
"""

RenpyTransition = "fade"
RenpyInitLabel = ".init"

class Slide:
    def __init__(self, id, html, renpy, left = '', right = '', up = '', down = '', parent = '' ):
        self.id = id
        self.parent = parent
        self.html = html
        
        self.renpy = renpy
      
        self.up = up
        self.left = left
        self.right = right
        self.down = down
        
        self.note = ""

        
    def __repr_reveal_html__( self ):
        reveal = JBDocument.sInstTemplate( REVEAL_SLIDE_TEMPLATE, { 'id': self.id, 'slideHTML': self.html, 'slideNote': self.renpy, 'slideChildren':"" } )
        return reveal
        
    def createJBImage( self, css ):
        html = wp.HTML( string = self.html )
        doc = html.render( stylesheets = [ css ] )
        png, width, height = doc.write_png( target=None )
        img = JBImage( self.id, width, height, data = png, localFile= ROOT_DIR / self.getImageFileName() )
        return img

    def getImageFileName( self ):
        return f"renpy/images/Slides/{self.id}.png"
      
    def addRenpy( self, txt ):
        self.renpy = self.renpy + '\n' + txt

import pathlib

class JBDocument:
    def __init__(self, title, styleSlides, background = '', footer = '', header = '' ):
        self.title = title
        self.cssSlides = wp.CSS( string = styleSlides )
        self.slides = []
        self.renpy = []
      
        self.current = ''
        self.parent = ''
        
        self.slideCount = 1
        self.slideFragmentCount = 1
        
        self.user_ns = {}
        
        self.footer = footer
        self.header = header
        self.background = background
        
    @staticmethod
    def sInstTemplate( text, vars ):
        prev = ""
        current = text
        #vars = { **self.user_ns, **vars }
        while( prev != current ):
            t = Template( current )
            prev = current
            current = t.render( vars )
        return current 
      
    def instTemplate( self, text, vars ):
        return JBDocument.sInstTemplate( text, { **self.user_ns, **vars } )
        
    def findSlideIndex( self, id ):
        #print('Looking for', id)
        try:
            ind = next(i for i,v in enumerate( self.slides ) if v.id == id )
        except StopIteration:
            ind = -1
        #print('returning', ind )
        return ind
      
    def addSlide( self, id, slideHTML, background = '', header = '', footer = ''):
        #html = wp.HTML( string = slideHTML )
        #doc = html.render( stylesheets = [ self.cssSlides ] )
        #png, width, height = doc.write_png( target=None )
        
        if ( not background ):
            background = self.instTemplate( self.background, {} )
        
        if ( not header ):
            header = self.instTemplate( self.header, {} ) 
            
        if ( not footer ):
            footer = self.instTemplate( self.footer, {} )
            
        self.slideCount = self.slideCount + 1
        self.slideFragmentCount = 1
        
        if ( id == "" ):
            id = "slide_{0:05d}_frag_{1:05d}".format( self.slideCount, self.slideFragmentCount )
        
        if ( id[0] == '"' ) or ( id[0] == "'" ):
            id = id[1:]
        if ( id[-1] == '"' ) or ( id[-1] == "'" ):
            id = id[:-1]
            
        oind = self.findSlideIndex( id )
        if (  oind >= 0 ) and ( oind < len(self.slides) ):
            del self.slides[oind]
        
        #print("footer", footer )
        sl = Slide( id, header + '\n' + background + '\n' + slideHTML + '\n' + footer, renpy = '', left='', right='', up='', down='' )
        
        if ( self.current != '' ):
            leftS = self.slides[ self.findSlideIndex( self.current ) ]
            leftS.right = sl.id
            sl.left = self.current
        
        self.current = id
        self.slides.append( sl )
        return sl
        
    def getCurrentSlide( self ):
        slide = None
        idx = self.findSlideIndex( self.current )
        if ( idx >= 0 ) and ( idx < len( self.slides ) ):
            slide = self.slides[idx]
        return slide
        
    def numberOfSlides( self ):
        return ( len( self.slides ) )
    
    def createSlides( self, start ):
        s = self.slides[ self.findSlideIndex( start ) ]
        slides = s.__repr_reveal_html__()
        
        while( s.right != '' ):
            s = self.slides[ self.findSlideIndex( s.right ) ]
            slides = slides + s.__repr_reveal_html__()
        return slides
      
    def createRevealSlideShow(self, startId = None ):
        if ( not startId ):
            startId = self.slides[0].id
        slides = self.createSlides( startId )
        presentation = self.instTemplate( REVEAL_PRESENTATION_TEMPLATE, { 'title': self.title, 'slides': slides } )
        return presentation
    
    def createRevealDownload( self, dir, fname = 'index.html' ):
        html = self.createRevealSlideShow()
        with open( pathlib.Path( dir ).joinpath( fname ), "w" ) as f:
            f.write( html )
        #enc = base64.b64encode( bytes(html, 'utf-8' ) ).decode('utf-8')
        
        #lnk1 =  '<p><a href="data:text/html;base64,{data}" target="_blank">Open reveal slide show </a></p>\n'.format( title=self.title, data=enc )
        #lnk2 =  '<p><a href="" download="{title}_reveal.html">Download reveal slide show </a></p>\n'.format( title=self.title, data=enc )
        
        #display( HTML( lnk1 + lnk2 ) )
    
    def createSlideImages(self, rdir ):
        for s in self.slides:
            img = s.createJBImage( self.cssSlides )
            img.writeData( rdir )
    
    def createBackgroundsFile( self, rdir ):
        with open( pathlib.Path( rdir ).joinpath( "renpy/game/backgrounds.rpy" ), "w" ) as f:
            for s in self.slides:
                fname = s.getImageFileName()
                p = pathlib.Path( fname )
                rp = pathlib.Path(* p.parts[1:])
                f.write( f'image bg {s.id} = "{ str(rp) }"\n' )

    def createScriptFiles( self, rdir, startId = None ):
        if ( not startId ):
            startId = self.slides[0].id
        
        rpyScript = self.instTemplate( RenpyInitTemplate, { 'title': title, 'startId': startId } )
        with open( pathlib.Path( rdir ).joinpath( "renpy/game/start.rpy"), "w" ) as f:
            f.write( rpyScript )

        currentIdx = self.findSlideIndex( startId )

        while ( currentIdx >= 0 ) and ( currentIdx < len( self.slides) ):
            s = self.slides[ currentIdx ]
            if ( s.renpy ):
                print('Slide', s.id, 'has renpy', s.renpy )
            rpyScript = self.instTemplate( RenpyScriptTemplate, { 'label': s.id, 'transition': RenpyTransition, 'id': s.id, 'renpy': s.renpy, 'right': s.right } )
            
            with open( pathlib.Path( rdir ).joinpath( f"renpy/game/{s.id}.rpy"), "w" ) as f:
                f.write( rpyScript )

            currentIdx = self.findSlideIndex( s.right )

    def createRenpySlideShow(self, rdir, startId = None ):
        self.createSlideImages( rdir )
        self.createBackgroundsFile( rdir )
        self.createScriptFiles( rdir, startId )

THEME="ntnuerc"
RevealSlideFooter = """
<footer>
<div class="jb-footer-left">
    <img class="jb-footer-left-img plain" src="{{ logo.url }}" alt="{{logo.name}}" />
</div>
<div class="jb-footer-right">
    <img class="jb-footer-right-img plain" src="{{ robbi.url }}" alt="{{robbi.name}}" />
</div>
</footer>
"""

import re
import pathlib

def makeRevealThemeLocal( revealTheme ):
    """removes .reveal, .reveal .slides, and .reveal .slides section from theme css"""
    themePath = pathlib.Path( str(ROOT_DIR) +  '/reveal.js' +  '/css/theme/' + THEME + '.css' )
    with open( themePath ) as f:
        css = f.read()
    for x,r in [ ( "\.reveal \.slides section ", ".jb-render " ), 
                ("\.reveal \.slides ", ".jb-render " ), 
                ("\.reveal ", ".jb-render " ), 
                ("section", ".jb-render ") ]:
        css = re.sub(x, r, css)
    return css

codeCellCSS = """
.jb-input-code {
    color: #101010;
    width: 90%;
    display: inline-block;
}

.jb-stdout {
    color: #101010;
    background: #e0e0e0;
    width: 90%;
    display: inline-block;
}
"""
localTheme = makeRevealThemeLocal( "/theme/" + THEME ) + codeCellCSS 
#print("local css", localTheme)

@magics_class
class JackyMagics(Magics):
    def __init__(self, shell, doc ):
        super(JackyMagics, self).__init__(shell)
        self.doc = doc
      
    def instTemplate( self, text, vars ):
        return JBDocument.sInstTemplate( text, { **self.shell.user_ns, **vars } )
      
    def html_parts(self, input_string, source_path=None, destination_path=None,
               input_encoding='unicode', doctitle=True,
               initial_header_level=1):
        """
    Given an input string, returns a dictionary of HTML document parts.

    Dictionary keys are the names of parts, and values are Unicode strings;
    encoding is up to the client.

    Parameters:

    - `input_string`: A multi-line text string; required.
    - `source_path`: Path to the source file or object.  Optional, but useful
      for diagnostic output (system messages).
    - `destination_path`: Path to the file or object which will receive the
      output; optional.  Used for determining relative paths (stylesheets,
      source links, etc.).
    - `input_encoding`: The encoding of `input_string`.  If it is an encoded
      8-bit string, provide the correct encoding.  If it is a Unicode string,
      use "unicode", the default.
    - `doctitle`: Disable the promotion of a lone top-level section title to
      document title (and subsequent section title to document subtitle
      promotion); enabled by default.
    - `initial_header_level`: The initial level for header elements (e.g. 1
      for "<h1>").
        """
        overrides = {'input_encoding': input_encoding,
                     'doctitle_xform': doctitle,
                     'initial_header_level': initial_header_level}
        parts = core.publish_parts(
            source=input_string, source_path=source_path,
            destination_path=destination_path,
            writer_name='html', settings_overrides=overrides)
        return parts

      
    def html_body(self, input_string, source_path=None, destination_path=None,
              input_encoding='unicode', output_encoding='unicode',
              doctitle=True, initial_header_level=1):
        """
    Given an input string, returns an HTML fragment as a string.

    The return value is the contents of the <body> element.

    Parameters (see `html_parts()` for the remainder):

    - `output_encoding`: The desired encoding of the output.  If a Unicode
      string is desired, use the default value of "unicode" .
        """
        parts = self.html_parts(
            input_string=input_string, source_path=source_path,
            destination_path=destination_path,
            input_encoding=input_encoding, doctitle=doctitle,
            initial_header_level=initial_header_level)
        fragment = parts['html_body']
        if output_encoding != 'unicode':
            fragment = fragment.encode(output_encoding)
        return fragment

    def embedCellHTML( self, html, line, cls, css ):
        it = "" 
        
        if css:
            it = it + "<style>\n" + css + "\n" + "</style>" + "\n"
        
        it = it + '<div class="{cls} jb-render">\n'.format(cls=cls)

        if line:
            #print("Adding style", line)
            it = it + "<div {0}>\n".format(line)
        #it = it + "<div class=\"reveal\">"
        #it = it + "    <div class=\"slides\">"
        #it = it + "        <section>"
        
        it = it + html + "\n"

        #it = it + "        </section>"
        #it = it + "    </div>"
        #it = it + "</div>"
        
        it = it + '</div>\n'
        #it = it + """
        #          <script src="reveal.js/js/reveal.js"></script>
		    #          <script>
			  #             Reveal.initialize();
		    #          </script>
        #"""
        if line:
            it = it + "</div>\n"
        #print(self.shell.user_ns['test'])
        #print(s
        return it
      
    def createHTMLRepr( self, output ):
        rh = getattr( output, "_repr_html_", None )
        if ( callable( rh ) ):
            html = output._repr_html_()
            if ( html is not None ):
                return html
            else:
                rp = getattr( output, "_repr_png_", None )
                if ( callable(rp) ):
                    png = output._repr_png_()
              
                    if ( png is not None ):
                        enc = base64.b64encode(png).decode('utf-8')
                        
                        return '<img src="data:image/png;base64,{0}"></img>'.format(enc)
        return None
      
    @cell_magic
    def html_templ(self, line, cell ):
        it = ""
        if line:
            it = it + "<div {0}>\n".format(line)
        it = it + cell + "\n"
        if line:
            it = it + "</div>\n"
        #print(self.shell.user_ns['test'])
        #print(s)
        display(HTML( self.instTemplate(it, {}) ) )
    
    @cell_magic
    def reveal_html(self, line, cell ):      
        it = self.embedCellHTML( cell, line, 'jb-output', localTheme )
        display( HTML( self.instTemplate(it, { } ) ) )

    @cell_magic
    def reveal_rst(self, line, cell ):      
        
        md = self.html_body( input_string = cell )

        it = self.embedCellHTML( md, line, 'jb-output', localTheme )
        
        display( HTML( self.instTemplate(it, {} ) ) )

    @cell_magic
    def css( self, line, cell ):
        s = ""
        s = s + "<style>" + "\n"
        s = s + self.instTemplate(cell, {} )
        s = s + "</style>" + "\n"
        display( HTML(s) )
        
        
    @magic_arguments.magic_arguments()
    @magic_arguments.argument('--no-stderr', action="store_true",
        help="""Don't capture stderr."""
    )
    @magic_arguments.argument('--no-stdout', action="store_true",
        help="""Don't capture stdout."""
    )
    @magic_arguments.argument('--no-display', action="store_true",
        help="""Don't capture IPython's rich display."""
    )
    @magic_arguments.argument('--echo', action="store_true",
        help="""Prepend cell content."""
    )
    @magic_arguments.argument('--parent', type=str, default='', 
        help="""Select parent slide. Slide will be appended to list of children of this slide"""
    )
    @magic_arguments.argument('--id', type=str, default='', 
        help="""Select slide id"""
    )
    @magic_arguments.argument('--footer', type=str, default='', nargs=1, 
        help="""Define the slide footer"""
    )
    @magic_arguments.argument('--header', type=str, default='', nargs=1, 
        help="""Define the slide header"""
    )
    @magic_arguments.argument('--background', type=str, default='', nargs=1, 
        help="""Define the slide background"""
    )
    @magic_arguments.argument('--output', type=str, default='output', nargs=1,
        help="""A variable that will be pushed into the user namespace with the 
        utils.io.CapturedIO object.
        """
    )
    @magic_arguments.argument('--style', type=str, default='',
        help="""
        HTML inline style to be applied to the cell.
        """
    )
    
    @cell_magic
    def slide( self, line, cell):
        args = magic_arguments.parse_argstring(self.slide, line)
        out = not args.no_stdout
        err = not args.no_stderr
        disp = not args.no_display
        
        #print('args', args )

        if ( args.style ):
            if args.style[0] == '"' or args.style[0] == "'":
                args.style = args.style[1:]
            if args.style[-1] == '"' or args.style[-1] == "'":
                args.style = args.style[0:-1]
            
            mystyle = 'style="{s}"'.format(s=args.style)
        else:
            mystyle = ""
            
        #print("MYSTYLE", mystyle)
            
        s = self.instTemplate( cell, {} )
        with capture_output(out, err, disp) as io:
            self.shell.run_cell(s)
        
        html = '<div class="{cls}" id="{id}">\n'.format(cls="jb-slide", id=args.id)
        
        #print(args.echo)
        if ( args.echo ):
            html = html + '<div class="jb-input jb-render jb-code" style="text-align:center">' + '\n'
            html = html + self.embedCellHTML( highlight( cell, PythonLexer(), HtmlFormatter( cssstyles="color:#101010;display=inline-block;", noclasses=True ) ), mystyle, 'jb-input-code', localTheme ) + '\n'
            html = html + "</div>" + "\n"
        #print("html", html)

        if ( out ):
            if io.stdout != "":
                #print("Adding output", io.stdout)
                h = '<div class="jb-output jb-render code" style="text-align:center">' + '\n'
                h = h  + '<div class="jb-stdout code" style="display:inline-block; width:90%">' + '\n'
                h = h + '<pre {s}>\n'.format(s = mystyle)
                h = h + io.stdout
                h = h + '</pre>\n'
                h = h + '</div>\n'           
                h = h + '</div>\n'
                html = html + self.embedCellHTML( h, mystyle, 'jb-print', '' )
                
        for o in io.outputs:
            #print('Output', o)
            h = self.createHTMLRepr( o )
            #print('SLIDE: h', h)
            if ( h is not None ):
                html = html + "\n" + self.embedCellHTML( h, mystyle, 'jb-output-code', '' ) + "\n"
        
        html = html + "\n" + "</div>"

        #html = re.sub("<style>.*", "", html, flags=re.MULTILINE )
        #htmlNoStyle=html
        #if ( html.find("<style>") >= 0 ) and  ( html.find("</style>") >= 0 ):
        #    htmlNoStyle = html[:html.find("<style>")] + html[html.find("</style>") + len("</style>"):]
        #print('*** HTML ***', html)
        
        if args.output:
            self.shell.user_ns[args.output] = html

        slide = self.doc.addSlide( args.id, html, args.background, args.header, args.footer )
        
        #print(t)
        display( HTML( '<style>\n' + localTheme + '\n' + '</style>' + '\n' + slide.html ) )
        #display( Image(slide.image ) )
        
        
    @magic_arguments.magic_arguments()
    @magic_arguments.argument('--id', type=str, default='', 
        help="Select slide id. Use current slide if unspecified."
    )
    @magic_arguments.argument('--label', type=str, default='', 
        help="Select start label for renpy script of this slide"
    )
    
    @cell_magic
    def renpy( self, line, cell):
        args = magic_arguments.parse_argstring(self.renpy, line)
        RENPY_INDENT = 4
        it = ""
        if args.label:
            it = it + "\n" + "label" + " " + args.label + ":"
            indent = RENPY_INDENT
        else:
            indent = 0
        cellText = "\n".join( [ " " * indent + c if (len(c) > 0 ) else "\n" for c in cell.splitlines() ] )
        it = it + cellText + "\n"
        
        #print(self.shell.user_ns['test'])
        #print(s)
        rp = self.instTemplate( it, {} )
        display( Pretty( rp ) )
        cs = doc.getCurrentSlide()
        if ( cs ):
            #print("*** Adding renpy to slide ", cs.id )
            #print(rp)
            
            cs.addRenpy( rp )
    
def load_ipython_extension(ipython):
    """
    Any module file that define a function named `load_ipython_extension`
    can be loaded via `%load_ext module.path` or be configured to be
    autoloaded by IPython at startup time.
    """
    # This class must then be registered with a manually created instance,
    # since its constructor has different arguments from the default:
    
    ratio = 1.0
    PAGE_SIZE=( int( 1280 * ratio ), int( 720 * ratio ) )

    cssStr = """
        @page {{
            size: {width}px {height}px;
            margin: 0px;
        }}""".format( width=PAGE_SIZE[0], height=PAGE_SIZE[1] )

    footer = RevealSlideFooter
    doc = JBDocument( title, cssStr + "\n" + localTheme, footer = footer )
    magics = JackyMagics( ipython, doc )
    doc.user_ns = magics.shell.user_ns
    ipython.register_magics(magics)
    return doc

doc = load_ipython_extension( get_ipython() )

def doDownloadReveal():
    doc.createRevealDownload( ROOT_DIR / "reveal.js" )
    downloadDir( ROOT_DIR / "{title}_reveal.zip".format( title=title ), "reveal.js", ROOT_DIR )  

def doDownloadRenpy():
    doc.createRenpySlideShow( ROOT_DIR )
    downloadDir( ROOT_DIR / "{title}_renpy.zip".format( title=title ), "renpy", ROOT_DIR )        
doc.createRenpySlideShow( ROOT_DIR )
downloadDir( ROOT_DIR / "{title}_renpy.zip".format( title=title ), "renpy", ROOT_DIR ) 
